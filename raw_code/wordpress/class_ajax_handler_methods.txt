    public function listen(){

		if ( defined('DOING_AJAX') && DOING_AJAX ) {
			$action 	= sanitize_text_field( $_REQUEST['action'] );
			$methodName = str_replace( $this->prefix, '', $action );
			if(
				strpos( $action, $this->prefix ) === 0
				&&
				method_exists( $this, $methodName )
			){
				add_action( 'wp_ajax_' . $action, array( $this, $methodName ) );
				$method = new \ReflectionMethod( $this, $methodName );
				$params = $method->getParameters();
				if( $params ){
					$public = $params[0];
					if(
						$public->isOptional()
						&&
						$public->getDefaultValue()
					){
						add_action( 'wp_ajax_nopriv_' . $action, array( $this, $methodName ) );
					}
				}
			}
		}
	}

    /**
     * Send json result
     * @return array if request not ajax send $this
     */
	public function send(){
	    return $this->ajax->send();
    }

    /**
     * Set success with successful message
     * @param  string $message Successfully message
     * @return AjaxManager
     */
    public function success( $message = '', $httcode = 200 ){
        return $this->ajax->success( $message, $httcode );
    }

    /**
     * Set error with failed message
     * @param  string $message Failed message
     * @return AjaxManager
     */
    public function error( $message = '', $error_code = 'error', $http_code = 400 ){
        return $this->ajax->error( $message, $error_code, $http_code );
    }

    /**
     * Set extra data for ajax result
     * @param string $key extra data key
     * @param mixed $value extra data value
     * @return AjaxManager
     */
    public function set( $key, $value ) {
        return $this->ajax->set( $key, $value );
    }

    /**
     * Send ajax error when nonce invalid with action
     * @param $nonce nonce hashed value
     * @param $action action that nonce create by that
     * @param bool $message message on invalid nonce
     */
    public function on_invalid_nonce( $nonce, $action, $message = false ){
        $this->ajax->on_invalid_nonce( $nonce, $action, $message );
    }


    /***********************
    ** Start ajax actions* *
    ***********************/

	/**
	 * Example: private ajax callback for when user is logged in
	 */
	/*
	public function my_function()
	{

	}
	*/

	/**
	 * Example: no private or public ajax callback when user is not logged in
	 */
	/*
	public function my_function( $public = true )
	{

	}
	*/